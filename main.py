import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import requests  # –î–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from googletrans import Translator
import openpyxl  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = "8111798890:AAFdyuUCKEG-Z0eAznHIbPMVNKUJ07lLYgw"
TRACK24_API_KEY = "774f1dbcde7b02c7cfe41b797f4965b4" 
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á API Track24
EXCEL_FILE = "track_codes.xlsx"  
# –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É Excel-—Ñ–∞–π–ª—É

bot = telebot.TeleBot(API_TOKEN)
translator = Translator()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
current_language = "ru"

# ---------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---------------- #
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = KeyboardButton("üìç –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤")
    btn2 = KeyboardButton("üí∞ –¶–µ–Ω—ã")
    btn3 = KeyboardButton("üåê –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫")
    btn4 = KeyboardButton("üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç")
    btn5 = KeyboardButton("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫-–∫–æ–¥–∞")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# ---------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫-–∫–æ–¥–∞ ---------------- #
def find_in_excel(file_path, track_code):
    """–ò—â–µ—Ç —Ç—Ä–µ–∫-–∫–æ–¥ –≤ –±–∞–∑–µ Excel."""
    try:
        workbook = openpyxl.load_workbook(file_path)
        sheet = workbook.active
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[0] == track_code:
                return True  # –ï—Å–ª–∏ —Ç—Ä–µ–∫-–∫–æ–¥ –Ω–∞–π–¥–µ–Ω
        return False  # –ï—Å–ª–∏ —Ç—Ä–µ–∫-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
        return False

def get_tracking_info(track_code):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ API Track24."""
    url = "https://api.track24.net/tracking/json/v2/"  # URL API Track24
    headers = {"Track24-API-Key": TRACK24_API_KEY}
    payload = {"trackCode": track_code}

    try:
        response = requests.post(url, json=payload, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if "data" in data and data["data"]:
                status = data["data"][0]["status"]
                return status
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {e}")
        return None

@bot.message_handler(func=lambda message: message.text == "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫-–∫–æ–¥–∞")
def check_track_code(message):
    if current_language == "ru":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç—Ä–µ–∫-–∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    else:
        bot.send_message(message.chat.id, "Please provide your tracking code for verification:")
    bot.register_next_step_handler(message, process_track_code)

def process_track_code(message):
    track_code = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫-–∫–æ–¥ –≤ –±–∞–∑–µ Excel
    is_in_base = find_in_excel(EXCEL_FILE, track_code)
    if not is_in_base:
        if current_language == "ru":
            bot.send_message(message.chat.id, "‚ùå –¢—Ä–µ–∫-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        else:
            bot.send_message(message.chat.id, "‚ùå The tracking code was not found in the database.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API Track24
    tracking_info = get_tracking_info(track_code)
    if tracking_info:
        if current_language == "ru":
            bot.send_message(message.chat.id, f"üì¶ *–°—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏:*\n{tracking_info}", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, f"üì¶ *Package Status:*\n{tracking_info}", parse_mode="Markdown")
    else:
        if current_language == "ru":
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç—Ä–µ–∫-–∫–æ–¥—É.")
        else:
            bot.send_message(message.chat.id, "‚ùå Failed to retrieve information for the tracking code.")

# ---------------- –û—Å—Ç–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---------------- #
# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MARKET!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )

# ---------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---------------- #
if __name__ == "__main__":
    bot.remove_webhook()  # –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±—Ö—É–∫
    bot.polling()